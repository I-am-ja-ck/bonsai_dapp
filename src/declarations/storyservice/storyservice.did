type VotingProposal = 
 record {
   body: text;
   open: bool;
   proposalNumber: int;
   title: text;
   votes: int;
 };
type Tree = 
 variant {
   leaf;
   node:
    record {
      Color;
      Tree;
      record {
        text;
        opt AttributeValueRBTreeValue;
      };
      Tree;
    };
 };
type StoryService = 
 service {
   closeProposals: (text) -> (text);
   getPK: () -> (text) query;
   getProposal: (text) -> (Result_1) query;
   getStory: (text) -> (opt SingleStory) query;
   likeStory: (text) -> (Result);
   putStory: (SingleStory, vec VotingProposal) -> (text);
   scanAllStories: (text, text, nat, opt bool) ->
    (ScanStoriesQuickReturn) query;
   skExists: (text) -> (bool) query;
   transferCycles: () -> ();
   voteOnProposal: (text, text) -> (Result);
   whoami: () -> (principal);
 };
type SingleStory = 
 record {
   author: text;
   body: text;
   genre: text;
   groupName: text;
   likes: int;
   proposals: int;
   title: text;
   views: int;
 };
type ScanStoriesQuickReturn = 
 record {
   nextKey: opt text;
   stories: vec ScanStoriesQuickElement;
 };
type ScanStoriesQuickElement = 
 record {
   genre: text;
   groupName: text;
   sortKey: text;
 };
type ScalingOptions = 
 record {
   autoScalingHook: AutoScalingCanisterSharedFunctionHook;
   sizeLimit: ScalingLimitType;
 };
type ScalingLimitType = 
 variant {
   count: nat;
   heapSize: nat;
 };
type SK = text;
type Result_1 = 
 variant {
   err: text;
   ok: opt VotingProposal;
 };
type Result = 
 variant {
   err: text;
   ok: opt ConsumableEntity;
 };
type PK = text;
type ConsumableEntity = 
 record {
   attributes: vec record {
                     AttributeKey;
                     AttributeValue;
                   };
   pk: PK;
   sk: SK;
 };
type Color = 
 variant {
   B;
   R;
 };
type AutoScalingCanisterSharedFunctionHook = func (text) -> (text);
type AttributeValueRBTreeValue = 
 variant {
   arrayBool: vec bool;
   arrayFloat: vec float64;
   arrayInt: vec int;
   arrayText: vec text;
   "blob": blob;
   "bool": bool;
   float: float64;
   "int": int;
   "text": text;
   tuple: vec AttributeValuePrimitive;
 };
type AttributeValuePrimitive = 
 variant {
   "bool": bool;
   float: float64;
   "int": int;
   "text": text;
 };
type AttributeValue = 
 variant {
   arrayBool: vec bool;
   arrayFloat: vec float64;
   arrayInt: vec int;
   arrayText: vec text;
   "blob": blob;
   "bool": bool;
   float: float64;
   "int": int;
   "text": text;
   tree: Tree;
   tuple: vec AttributeValuePrimitive;
 };
type AttributeKey = text;
service : (record {
             owners: opt vec principal;
             partitionKey: text;
             scalingOptions: ScalingOptions;
           }) -> StoryService
